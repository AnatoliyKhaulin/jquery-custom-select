{"version":3,"sources":["../../jquery.custom-select.js"],"names":["CustomSelect","$","fn","options","this","each","createOptionsArray","optionsArray","$selectOptions","i","option","el","text","trim","push","hideDropdown","$dropdown","slideUp","defaults","transition","$customSelect","removeClass","customSelectActiveModifier","customSelectDropupModifier","hideCallback","call","window","off","outsideClickHandler","toggleDropupModifier","$customSelectValue","setDropdownToggle","keyboard","$dropdownOptions","blur","keyboardHandler","autocomplete","show","$input","val","$optionWrap","scrollTop","one","event","preventDefault","addClass","on","slideDown","showCallback","document","documentElement","index","bottom","getBoundingClientRect","toggleClass","height","$target","target","parents","is","visibleOptions","dropdownOptions","keyCode","find","eq","length","focus","trigger","$select","autocompletePlaceholder","block","includeValue","modifier","placeholder","extend","hide","after","customSelect","dropdownOptionHtml","next","html","attr","append","cssClass","$currentOption","prop","data","wrapAll","choice","splice","$option","remove","$this","originalEvent","query","setTimeout","match","toLowerCase","indexOf","toggle"],"mappings":"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","sourcesContent":["import $ from 'jquery';\r\n\r\n/*!\r\n * Custom Select jQuery Plugin\r\n */\r\n\r\nconst CustomSelect = (($) => {\r\n\r\n  /**\r\n   * Custom Select\r\n   *\r\n   * Creates custom dropdown instead of default `<select>`\r\n   *\r\n   * @param {Object} [options] - Settings object\r\n   * @param {boolean} [options.autocomplete=false] - Adds input to filter options\r\n   * @param {string} [options.autocompletePlaceholder=false] - Autocomplete input\r\n   * placeholder hint (appears if autocomplete option is not false)\r\n   * @param {string} [options.block=custom-select] - Class name (BEM block name)\r\n   * @param {Function} [options.hideCallback=false] - Fires after dropdown closes\r\n   * @param {boolean} [options.includeValue=false] - Shows chosen value option in\r\n   * dropdown, if enabled also cancels dropdown options rerender\r\n   * @param {boolean} [options.keyboard=true] - Enables keyboard control\r\n   * @param {string} [options.modifier=false] - Additional class, e.g. BEM modifier\r\n   * @param {string} [options.placeholder=false] - Custom select placeholder hint,\r\n   * can be an HTML string (appears if there is no explicitly selected options)\r\n   * @param {Function} [options.showCallback=false] - Fires after dropdown opens\r\n   * @param {number || string} [options.transition=100] - jQuery slideUp/Down speed\r\n   */\r\n  function CustomSelect(options) {\r\n    $(this).each(function () {\r\n      let $select = $(this);\r\n      let optionsArray = [];\r\n\r\n      const defaults = {\r\n        autocomplete: false,\r\n        autocompletePlaceholder: false,\r\n        block: 'custom-select',\r\n        hideCallback: false,\r\n        includeValue: false,\r\n        keyboard: true,\r\n        modifier: false,\r\n        placeholder: false,\r\n        showCallback: false,\r\n        transition: 100\r\n      };\r\n\r\n      if (typeof options === 'object') {\r\n        $.extend(defaults, options);\r\n      }\r\n\r\n      $select\r\n        .hide()\r\n        .after(\r\n          `<div class=\"${defaults.block}\">\r\n             <button class=\"${defaults.block}__option ${defaults.block}__option--value\"></button>\r\n             <div class=\"${defaults.block}__dropdown\"></div>\r\n           </div>`\r\n        );\r\n\r\n      let $selectOptions = $select.find('option');\r\n\r\n      const customSelect = `.${defaults.block}`;\r\n      const customSelectActiveModifier = `${defaults.block}--active`;\r\n      const customSelectDropupModifier = `${defaults.block}--dropup`;\r\n      const dropdownOptionHtml = `<button class=\"${defaults.block}__option\"></button>`;\r\n      const dropdownOptions = `${customSelect}__option`;\r\n\r\n      let $customSelect = $select.next(customSelect);\r\n      let $customSelectValue = $customSelect.find(`${customSelect}__option--value`);\r\n      let $dropdown = $customSelect.find(`${customSelect}__dropdown`);\r\n\r\n      if (defaults.modifier) {\r\n        $customSelect.addClass(defaults.modifier);\r\n      }\r\n\r\n      createOptionsArray();\r\n      $dropdown.html('').hide();\r\n      let $input = null;\r\n\r\n      // Add autocomplete input\r\n      if (defaults.autocomplete) {\r\n        $input = $(`<input class=\"${defaults.block}__input\">`);\r\n        if (defaults.autocompletePlaceholder) {\r\n          $input.attr('placeholder', defaults.autocompletePlaceholder);\r\n        }\r\n        $dropdown.append($input);\r\n      }\r\n\r\n      // Disable placeholder if there is explicitly selected option\r\n      if ($select.find('[selected]').length) {\r\n        defaults.placeholder = false;\r\n      }\r\n\r\n      // Create custom select options\r\n      $.each(optionsArray, (i, el) => {\r\n        let cssClass = $selectOptions.eq(i).attr('class');\r\n        let $currentOption = $(dropdownOptionHtml).text(el).addClass(cssClass);\r\n\r\n        if (el === $select.find(':selected').text().trim()) {\r\n          if (!defaults.placeholder) {\r\n            $customSelectValue.text(el);\r\n          } else {\r\n            $customSelectValue.html(defaults.placeholder);\r\n            // Set select value to null\r\n            $select.prop('selectedIndex', -1);\r\n          }\r\n          $customSelectValue.addClass(cssClass).data('class', cssClass);\r\n          if (defaults.includeValue || defaults.placeholder) {\r\n            $dropdown.append($currentOption);\r\n          }\r\n        } else {\r\n          $dropdown.append($currentOption);\r\n        }\r\n      });\r\n\r\n      setDropdownToggle();\r\n\r\n      let $dropdownOptions = $dropdown.find(dropdownOptions);\r\n      let $optionWrap = null;\r\n\r\n      if (defaults.autocomplete) {\r\n        $dropdownOptions.wrapAll(`<div class=\"${defaults.block}__option-wrap\"></div>`);\r\n        $optionWrap = $dropdown.find(`${customSelect}__option-wrap`);\r\n      }\r\n\r\n      $dropdownOptions.on('click', function (event) {\r\n        event.preventDefault();\r\n        let choice = $(this).text().trim();\r\n        $customSelectValue.text(choice).removeClass($customSelectValue.data('class'));\r\n        $selectOptions.prop('selected', false);\r\n\r\n        $.each(optionsArray, (i, el) => {\r\n          if (!defaults.includeValue && el === choice) {\r\n            optionsArray.splice(i, 1);\r\n          }\r\n\r\n          $.each($selectOptions, function (i, option) {\r\n            let $option = $(option);\r\n            if ($option.text().trim() === choice) {\r\n              let cssClass = $option.attr('class');\r\n              $option.prop('selected', true);\r\n              $customSelectValue.addClass(cssClass).data('class', cssClass);\r\n            }\r\n          });\r\n        });\r\n\r\n        hideDropdown();\r\n\r\n        // Recreate custom select dropdown options\r\n        if (!defaults.includeValue) {\r\n          if ($dropdownOptions.length > optionsArray.length - 1) {\r\n            $dropdownOptions.eq(optionsArray.length).remove();\r\n          }\r\n          $.each($dropdownOptions, (i, option) => {\r\n            let $option = $(option);\r\n            $option.text(optionsArray[i]);\r\n\r\n            // Reset option class\r\n            $option.attr('class', `${defaults.block}__option`);\r\n\r\n            $.each($selectOptions, function () {\r\n              let $this = $(this);\r\n              if ($this.text().trim() === optionsArray[i]) {\r\n                $option.addClass($this.attr('class'));\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        createOptionsArray();\r\n\r\n        if (typeof event.originalEvent !== 'undefined') {\r\n          $select.trigger('change');\r\n        }\r\n      });\r\n\r\n      // Autocomplete\r\n      if (defaults.autocomplete) {\r\n        $input.on('focus', function () {\r\n          defaults.index = -1;\r\n          $optionWrap.scrollTop(0);\r\n        });\r\n\r\n        $input.on('keyup', function () {\r\n          let query = $input.val().trim();\r\n          if (query.length) {\r\n            setTimeout(() => {\r\n              if (query === $input.val().trim()) {\r\n                $.each($dropdownOptions, (i, option) => {\r\n                  let $option = $(option);\r\n                  let match = $option.text().trim().toLowerCase().indexOf(query.toLowerCase()) !== -1;\r\n                  $option.toggle(match);\r\n                });\r\n              }\r\n            }, 300);\r\n          } else {\r\n            $dropdownOptions.show();\r\n          }\r\n        });\r\n      }\r\n\r\n      function createOptionsArray() {\r\n        optionsArray = [];\r\n\r\n        $.each($selectOptions, (i, option) => {\r\n          let el = $(option).text().trim();\r\n          optionsArray.push(el);\r\n        });\r\n      }\r\n\r\n      function hideDropdown() {\r\n        $dropdown.slideUp(defaults.transition, () => {\r\n          $customSelect\r\n            .removeClass(customSelectActiveModifier)\r\n            .removeClass(customSelectDropupModifier);\r\n\r\n          // Close callback\r\n          if (typeof defaults.hideCallback === 'function') {\r\n            defaults.hideCallback.call($customSelect[0]);\r\n          }\r\n        });\r\n\r\n        $(window)\r\n          .off('click touchstart', outsideClickHandler)\r\n          .off('resize', toggleDropupModifier);\r\n        $customSelectValue.off('click');\r\n        setDropdownToggle();\r\n\r\n        if (defaults.keyboard) {\r\n          $dropdownOptions.blur();\r\n          $(window).off('keydown', keyboardHandler);\r\n        }\r\n\r\n        // Clear autocomplete\r\n        if (defaults.autocomplete) {\r\n          $dropdownOptions.show();\r\n          $input.val('');\r\n          $optionWrap.scrollTop(0);\r\n        }\r\n      }\r\n\r\n      function setDropdownToggle() {\r\n        $customSelectValue.one('click', (event) => {\r\n          event.preventDefault();\r\n\r\n          $customSelect.addClass(customSelectActiveModifier);\r\n\r\n          // Set dropdown position\r\n          toggleDropupModifier();\r\n          $(window).on('resize', toggleDropupModifier);\r\n\r\n          $dropdown.slideDown(defaults.transition, () => {\r\n            // Open callback\r\n            if (typeof defaults.showCallback === 'function') {\r\n              defaults.showCallback.call($customSelect[0]);\r\n            }\r\n          });\r\n\r\n          $(window).on('ontouchstart' in document.documentElement ? 'touchstart' : 'click', outsideClickHandler);\r\n          $customSelectValue.one('click', (event) => {\r\n            event.preventDefault();\r\n            hideDropdown();\r\n          });\r\n\r\n          if (defaults.keyboard) {\r\n            defaults.index = -1;\r\n            $(window).on('keydown', keyboardHandler);\r\n          }\r\n        });\r\n      }\r\n\r\n      function toggleDropupModifier() {\r\n        let bottom = $customSelect[0].getBoundingClientRect().bottom;\r\n        $customSelect.toggleClass(customSelectDropupModifier, $(window).height() - bottom < $dropdown.height());\r\n      }\r\n\r\n      function outsideClickHandler(event) {\r\n        let $target = $(event.target);\r\n        if (!$target.parents().is($customSelect) && !$target.is($customSelect)) {\r\n          hideDropdown();\r\n        }\r\n      }\r\n\r\n      function keyboardHandler(event) {\r\n        let visibleOptions = dropdownOptions + ':visible';\r\n\r\n        switch (event.keyCode) {\r\n          // Down\r\n          case 40:\r\n            event.preventDefault();\r\n            if ($dropdown.find(visibleOptions).eq(defaults.index + 1).length !== 0) {\r\n              defaults.index += 1;\r\n            } else {\r\n              defaults.index = 0;\r\n            }\r\n            $dropdown.find(visibleOptions).eq(defaults.index).focus();\r\n            break;\r\n          // Up\r\n          case 38:\r\n            event.preventDefault();\r\n            if ($dropdown.find(visibleOptions).eq(defaults.index - 1).length !== 0 && defaults.index - 1 >= 0) {\r\n              defaults.index -= 1;\r\n            } else {\r\n              defaults.index = $dropdown.find(visibleOptions).length - 1;\r\n            }\r\n            $dropdown.find(visibleOptions).eq(defaults.index).focus();\r\n            break;\r\n          // Enter\r\n          case 13:\r\n          // Space\r\n          case 32:\r\n            if (!$input || !$input.is(':focus')) {\r\n              event.preventDefault();\r\n              $(dropdownOptions + ':focus').trigger('click');\r\n              $select.trigger('change');\r\n              $customSelectValue.focus();\r\n            }\r\n            break;\r\n          // Esc\r\n          case 27:\r\n            event.preventDefault();\r\n            hideDropdown();\r\n            $customSelectValue.focus();\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  $.fn['customSelect'] = CustomSelect;\r\n\r\n})($);\r\n\r\nexport default CustomSelect;\r\n"]}