{"version":3,"sources":["../../jquery.custom-select.js"],"names":["CustomSelect","$","fn","options","this","each","createOptionsArray","optionsArray","$selectOptions","i","option","el","text","trim","push","hideDropdown","$dropdown","slideUp","defaults","transition","$customSelect","removeClass","customSelectActiveModifier","hideCallback","call","window","off","windowEventHandler","$customSelectValue","setDropdownToggle","keyboard","$dropdownOptions","blur","keyboardHandler","autocomplete","show","$input","val","$optionWrap","scrollTop","one","event","preventDefault","windowEvent","document","documentElement","addClass","slideDown","showCallback","on","index","$target","target","parents","is","visibleOptions","dropdownOptions","keyCode","find","eq","length","focus","trigger","$select","autocompletePlaceholder","block","includeValue","modifier","placeholder","extend","hide","after","customSelect","dropdownOptionHtml","next","html","attr","append","cssClass","$currentOption","prop","data","wrapAll","choice","splice","$option","remove","$this","originalEvent","query","setTimeout","match","toLowerCase","indexOf","toggle"],"mappings":"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","sourcesContent":["import $ from 'jquery';\r\n\r\n/*!\r\n * Custom Select jQuery Plugin\r\n */\r\n\r\nconst CustomSelect = (($) => {\r\n\r\n  /**\r\n   * Custom Select\r\n   *\r\n   * Creates custom dropdown instead of default `<select>`\r\n   *\r\n   * @param {Object} [options] - Settings object\r\n   * @param {boolean} [options.autocomplete=false] - Adds input to filter options\r\n   * @param {string} [options.autocompletePlaceholder=false] - Autocomplete input\r\n   * placeholder hint (appears if autocomplete option is not false)\r\n   * @param {string} [options.block=custom-select] - Class name (BEM block name)\r\n   * @param {Function} [options.hideCallback=false] - Fires after dropdown closes\r\n   * @param {boolean} [options.includeValue=false] - Shows chosen value option in\r\n   * dropdown, if enabled also cancels dropdown options rerender\r\n   * @param {boolean} [options.keyboard=true] - Enables keyboard control\r\n   * @param {string} [options.modifier=false] - Additional class, e.g. BEM modifier\r\n   * @param {string} [options.placeholder=false] - Custom select placeholder hint,\r\n   * can be an HTML string (appears if there is no explicitly selected options)\r\n   * @param {Function} [options.showCallback=false] - Fires after dropdown opens\r\n   * @param {number || string} [options.transition=100] - jQuery slideUp/Down speed\r\n   */\r\n  function CustomSelect(options) {\r\n    $(this).each(function () {\r\n      let $select = $(this);\r\n      let optionsArray = [];\r\n\r\n      const defaults = {\r\n        autocomplete: false,\r\n        autocompletePlaceholder: false,\r\n        block: 'custom-select',\r\n        hideCallback: false,\r\n        includeValue: false,\r\n        keyboard: true,\r\n        modifier: false,\r\n        placeholder: false,\r\n        showCallback: false,\r\n        transition: 100\r\n      };\r\n\r\n      if (typeof options === 'object') {\r\n        $.extend(defaults, options);\r\n      }\r\n\r\n      $select\r\n        .hide()\r\n        .after(\r\n          `<div class=\"${defaults.block}\">\r\n             <button class=\"${defaults.block}__option ${defaults.block}__option--value\"></button>\r\n             <div class=\"${defaults.block}__dropdown\"></div>\r\n           </div>`\r\n        );\r\n\r\n      let $selectOptions = $select.find('option');\r\n\r\n      const customSelect = `.${defaults.block}`;\r\n      const customSelectActiveModifier = `${defaults.block}--active`;\r\n      const dropdownOptionHtml = `<button class=\"${defaults.block}__option\"></button>`;\r\n      const dropdownOptions = `${customSelect}__option`;\r\n\r\n      let $customSelect = $select.next(customSelect);\r\n      let $customSelectValue = $customSelect.find(`${customSelect}__option--value`);\r\n      let $dropdown = $customSelect.find(`${customSelect}__dropdown`);\r\n\r\n      if (defaults.modifier) {\r\n        $customSelect.addClass(defaults.modifier);\r\n      }\r\n\r\n      createOptionsArray();\r\n      $dropdown.html('').hide();\r\n      let $input = null;\r\n\r\n      // Add autocomplete input\r\n      if (defaults.autocomplete) {\r\n        $input = $(`<input class=\"${defaults.block}__input\">`);\r\n        if (defaults.autocompletePlaceholder) {\r\n          $input.attr('placeholder', defaults.autocompletePlaceholder);\r\n        }\r\n        $dropdown.append($input);\r\n      }\r\n\r\n      // Disable placeholder if there is explicitly selected option\r\n      if ($select.find('[selected]').length) {\r\n        defaults.placeholder = false;\r\n      }\r\n\r\n      // Create custom select options\r\n      $.each(optionsArray, (i, el) => {\r\n        let cssClass = $selectOptions.eq(i).attr('class');\r\n        let $currentOption = $(dropdownOptionHtml).text(el).addClass(cssClass);\r\n\r\n        if (el === $select.find(':selected').text().trim()) {\r\n          if (!defaults.placeholder) {\r\n            $customSelectValue.text(el);\r\n          } else {\r\n            $customSelectValue.html(defaults.placeholder);\r\n            // Set select value to null\r\n            $select.prop('selectedIndex', -1);\r\n          }\r\n          $customSelectValue.addClass(cssClass).data('class', cssClass);\r\n          if (defaults.includeValue || defaults.placeholder) {\r\n            $dropdown.append($currentOption);\r\n          }\r\n        } else {\r\n          $dropdown.append($currentOption);\r\n        }\r\n      });\r\n\r\n      setDropdownToggle();\r\n\r\n      let $dropdownOptions = $dropdown.find(dropdownOptions);\r\n      let $optionWrap = null;\r\n\r\n      if (defaults.autocomplete) {\r\n        $dropdownOptions.wrapAll(`<div class=\"${defaults.block}__option-wrap\"></div>`);\r\n        $optionWrap = $dropdown.find(`${customSelect}__option-wrap`);\r\n      }\r\n\r\n      $dropdownOptions.on('click', function (event) {\r\n        event.preventDefault();\r\n        let choice = $(this).text().trim();\r\n        $customSelectValue.text(choice).removeClass($customSelectValue.data('class'));\r\n        $selectOptions.prop('selected', false);\r\n\r\n        $.each(optionsArray, (i, el) => {\r\n          if (!defaults.includeValue && el === choice) {\r\n            optionsArray.splice(i, 1);\r\n          }\r\n          $.each($selectOptions, function (i, option) {\r\n            let $option = $(option);\r\n            if ($option.text().trim() === choice) {\r\n              let cssClass = $option.attr('class');\r\n              $option.prop('selected', true);\r\n              $customSelectValue.addClass(cssClass).data('class', cssClass);\r\n            }\r\n          });\r\n        });\r\n\r\n        hideDropdown();\r\n\r\n        // Recreate custom select dropdown options\r\n        if (!defaults.includeValue) {\r\n          if ($dropdownOptions.length > optionsArray.length - 1) {\r\n            $dropdownOptions.eq(optionsArray.length).remove();\r\n          }\r\n          $.each($dropdownOptions, (i, option) => {\r\n            let $option = $(option);\r\n            $option.text(optionsArray[i]);\r\n\r\n            // Reset option class\r\n            $option.attr('class', `${defaults.block}__option`);\r\n\r\n            $.each($selectOptions, function () {\r\n              let $this = $(this);\r\n              if ($this.text().trim() === optionsArray[i]) {\r\n                $option.addClass($this.attr('class'));\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        createOptionsArray();\r\n\r\n        if (typeof event.originalEvent !== 'undefined') {\r\n          $select.trigger('change');\r\n        }\r\n      });\r\n\r\n      // Autocomplete\r\n      if (defaults.autocomplete) {\r\n        $input.on('focus', function () {\r\n          defaults.index = -1;\r\n          $optionWrap.scrollTop(0);\r\n        });\r\n\r\n        $input.on('keyup', function () {\r\n          let query = $input.val().trim();\r\n          if (query.length) {\r\n            setTimeout(() => {\r\n              if (query === $input.val().trim()) {\r\n                $.each($dropdownOptions, (i, option) => {\r\n                  let $option = $(option);\r\n                  let match = $option.text().trim().toLowerCase().indexOf(query.toLowerCase()) !== -1;\r\n                  $option.toggle(match);\r\n                });\r\n              }\r\n            }, 300);\r\n          } else {\r\n            $dropdownOptions.show();\r\n          }\r\n        });\r\n      }\r\n\r\n      function createOptionsArray() {\r\n        optionsArray = [];\r\n\r\n        $.each($selectOptions, (i, option) => {\r\n          let el = $(option).text().trim();\r\n          optionsArray.push(el);\r\n        });\r\n      }\r\n\r\n      function hideDropdown() {\r\n        $dropdown.slideUp(defaults.transition, () => {\r\n          $customSelect.removeClass(customSelectActiveModifier);\r\n\r\n          // Close callback\r\n          if (typeof defaults.hideCallback === 'function') {\r\n            defaults.hideCallback.call($customSelect[0]);\r\n          }\r\n        });\r\n\r\n        $(window).off('click touchstart', windowEventHandler);\r\n        $customSelectValue.off('click');\r\n        setDropdownToggle();\r\n\r\n        if (defaults.keyboard) {\r\n          $dropdownOptions.blur();\r\n          $(window).off('keydown', keyboardHandler);\r\n        }\r\n\r\n        // Clear autocomplete\r\n        if (defaults.autocomplete) {\r\n          $dropdownOptions.show();\r\n          $input.val('');\r\n          $optionWrap.scrollTop(0);\r\n        }\r\n      }\r\n\r\n      function setDropdownToggle() {\r\n        $customSelectValue.one('click', (event) => {\r\n          event.preventDefault();\r\n          const windowEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';\r\n\r\n          $customSelect.addClass(customSelectActiveModifier);\r\n          $dropdown.slideDown(defaults.transition, () => {\r\n            // Open callback\r\n            if (typeof defaults.showCallback === 'function') {\r\n              defaults.showCallback.call($customSelect[0]);\r\n            }\r\n          });\r\n\r\n          $(window).on(windowEvent, windowEventHandler);\r\n          $customSelectValue.one('click', (event) => {\r\n            event.preventDefault();\r\n            hideDropdown();\r\n          });\r\n\r\n          if (defaults.keyboard) {\r\n            defaults.index = -1;\r\n            $(window).on('keydown', keyboardHandler);\r\n          }\r\n        });\r\n      }\r\n\r\n      function windowEventHandler(event) {\r\n        let $target = $(event.target);\r\n        if (!$target.parents().is($customSelect) && !$target.is($customSelect)) {\r\n          hideDropdown();\r\n        }\r\n      }\r\n\r\n      function keyboardHandler(event) {\r\n        let visibleOptions = dropdownOptions + ':visible';\r\n\r\n        switch (event.keyCode) {\r\n          // Down\r\n          case 40:\r\n            event.preventDefault();\r\n            if ($dropdown.find(visibleOptions).eq(defaults.index + 1).length !== 0) {\r\n              defaults.index += 1;\r\n            } else {\r\n              defaults.index = 0;\r\n            }\r\n            $dropdown.find(visibleOptions).eq(defaults.index).focus();\r\n            break;\r\n          // Up\r\n          case 38:\r\n            event.preventDefault();\r\n            if ($dropdown.find(visibleOptions).eq(defaults.index - 1).length !== 0 && defaults.index - 1 >= 0) {\r\n              defaults.index -= 1;\r\n            } else {\r\n              defaults.index = $dropdown.find(visibleOptions).length - 1;\r\n            }\r\n            $dropdown.find(visibleOptions).eq(defaults.index).focus();\r\n            break;\r\n          // Enter\r\n          case 13:\r\n          // Space\r\n          case 32:\r\n            if (!$input || !$input.is(':focus')) {\r\n              event.preventDefault();\r\n              $(dropdownOptions + ':focus').trigger('click');\r\n              $select.trigger('change');\r\n              $customSelectValue.focus();\r\n            }\r\n            break;\r\n          // Esc\r\n          case 27:\r\n            event.preventDefault();\r\n            hideDropdown();\r\n            $customSelectValue.focus();\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  $.fn['customSelect'] = CustomSelect;\r\n\r\n})($);\r\n\r\nexport default CustomSelect;\r\n"]}